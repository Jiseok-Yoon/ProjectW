BoCharacter 실제로 불러와질까.


ResourceManager 작성
    // Resources.Load, Assets 폴더 내 Resources 라는 이름의 폴더가 존재한다면
            // 해당 경로부터 Path를 읽음, 해당 경로에 파일이 GameObject 형태로 부를 수 있다면 불러옴

SpriteLoader 는 아틀라스 관리하는 클래스
아틀라스는 여러 스프라이트 하나의 텍스쳐로 사용.(메모리 최적화)
굉장히 자주 쓰지만 모노 필요 없어서 안씀.

아틀라스 분류 방법은 게임의 규모 또는 장르에 따라 달라질 수 있음

유니티는 씬 단위로 게임을 관리함. 
타이틀 씬 로비 씬 인게임 씬이 있다고 했을ㄸ ㅐ사용되는 이미지들이 있을 것.
그래서 타이틀에서 사용되는 이미지들 모아서 아틀라스 만들고 로그인 만들고 인게임 만들고.
이렇게 하면 씬 마다 아틀라스가 하나씩 있음.
그런데 이런 경우도 있을 것. 이 이미지는 타이틀도 로비도 쓰이는데 어떤 아틀라스 넣나요?
이런 경우는 Common이라고 만들어서 여기저기 많이 사용되는 애들을 따로 모음.
그러면 총 4개의 아틀라스가 만들어짐. 이 여러개의 아틀라스에서 내가 런타임에 특정 스프라이트를 가져오고 싶으면 아틀라스로 접근해서 아틀라스에서 이미 유니티에서 지원하는 SpriteAtlas라는 클래스가 있음. 거기에 접근해서 특정 스프라이트를 간단하게 이름으로 불러올 수가 있음.

아틀라스는 enum으로 타입 정의해놓고 딕셔너리에 키로 넣을 것임.

var key = Enum.Parse(typeof(AtlasType), atlases[i].name);
Enum은 따로 만든 데이터. 그래서 파싱하면 오브젝트로 주니까 캐스팅 해줘야 함.

이 아틀라스들은 리소스 매니저에서 불러옴. 리소스 폴더에서 Sprite 폴더 만들어서 거기서 LoadAll로 불러올 것.
그거 SetAtlas 해줄것이고

그리고 스프라이트 찾아서 가져오는건 스프라이트 로더에 메서드로.

리소스매니저 이니셜라이즈는 타이틀 컨트롤러에 해놓을 것.
프리팹도 마찬가지.

이제 새로운 기능.
우리가 런타임에 프리팹 객체 만들려고 했다면 리소스에서 로드한다음에 게임오브젝트에서 인스턴시에이트로 만들어서 사용했음.

그런데 이렇게 객체를 생성하거나 제거하는 작업은 굉장히 비용이 드는 작업. 그래서 최적화를 위해서 객체를 내가 사용할 만큼을 대략적으로 추측하고 필요할때마다 객체를 계속 생성하는게 아니라 씬이 처음 시작할 때 필요한 만큼 만들어놓는 것. 그리고 필요한 순간에 가져다가 활성화시켜주는 것.
그럼 유저한테는 똑같이 새로운 객체가 생성되는 것처럼 보이지만 그 이후에 사용이 끝났으면 단순히 비활성화만 시켜놓고 갖다놓으면 다음에 다시 객체가 필요할 때 또 가져와서 사용할 수 있음. 여기서 한 가지 의문이 듦.
객체를 생성하거나 제거하는 것 자체가 많은 비용인데 결국 똑같이 10마리 생성하는 것은 똑같지 않나?

그러나 뭐가 다르나? 그때그때 생성하면 연산하는데 있어서 동일한 처리량이라면 프로그램은 일정하게 연산 유지하면 되지만 지금처럼 특정 순간마다 계속 생성을 해버리면 순간에 연산량이 확 필요해지고 갑자기 많은 연산을 동일한 타임에 다 처리해야 하기 때문에 프레임이 확 드랍되어버림.
스파크가 발생한다고 표현. 이런식으로 스파크가 많으면 많을수록 순간마다 프레임이 들쭉날쭉 해짐. 그러면 유저는 프로그램이 렉이 걸린다고 생각하게 됨.
그래서 이런 스파크를 줄이기 위해 이 기법 오브젝트 풀을 사용하게 됨.
풀에 미리 객체 만들어서 담아뒀다가 꺼내서 쓰고 다시 넣고.

우리는 이제 리소스 매니저에서 불러온 프리팹을 무조건 생성해서 쓰지 말고 오브젝트 풀링 기법을 접목.
프리팹을 불러와서 사용할만큼 미리 객체 만들고 오브젝트 풀에 담아두는 것.

IPoolableObject 생성

오브젝트 풀은 제너릭 T타입 조건은 모노랑 풀러블 인터페이스 둘 다 가지고 있어야 함.

오브젝트 풀에는 풀리스트와 하이라키 상에서 들고 있을 홀더 하나.

그리고 Predicate 는 Func<T, bool> 하고 똑같음.
이거 람다식으로 구현해서 Find로 풀 안에서 차자서 canRecycle 가능한지 판단.

이제 풀러블 오브젝트 넣고 뺄 때 뺄 때 보면 다 같은 형식이지만 필드 데이터가 조금씩 달라서 원하는 특정 조건 객체 빼내고 싶을 수 있음. 그래서 파라미터로 프레디케이트를 작성.

오프젝트 풀 여러 구현 방법 있는데 활성 비활성으로 부모만 바뀌는 것으로 다 구현하고 이제 오브젝트 풀을 관리할 오브젝트 풀 매니저를 만들 것.
이거 만드는 것도 방법이 좀 갈림.
방법 1은 생산성은 높은데 성능은 떨어짐
방법 2는 생산성이 떨어지는데 성능은 좋음.

이럴경우 가성비 따져서 1번 대신 2번의 성능이 엄청난 성능 향상이 있는게 아니라면 1번.


