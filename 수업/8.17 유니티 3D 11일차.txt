애니메이션 이벤트 구현 위해 애니메이터 만들 것.
애니메이션 컨트롤러도 상속해서 파생이 가능함.

SDRPGPack1에서 애니메이션에 히어로 들어가면 애니메이션 있음.
그거 열어서 안쪽의 애니메이션만 복사.
애니메이션 애니메이션의 액터 안에 옮기고 컨트롤러에 올리기.

그리고 파라미터 추가 bool 형식으로

AnyState에서 각 상태로 트랜지션 넣고 트랜지션 조건 넣기.
컨디션에 추가.

유니티에서 AnyState면 자기 자신도 포함. 이미 Walk인데 또 Walk 트랜지션에 부합하는 조건이 들어오면 이미 애니메이션이 Walk여도 한 번 더 Walk로 들어옴. 이럴 때 실행도중에 다시 실행됨. 즉 조건이 맞으면 계속 앞부분만 실행된다는 것. 이것을 막아야 함. 어떻게 막냐. 기본 옵션에 있음. AnyState에서 나오는 Transsion에서만 가능하도록.
Can Transition To Self 옵션이 있음. 이거 체크 풀면 됨.

모든 스테이트는 다시 idle로 가도록 작업. 나중에 이어서 할 경우가 있으면 코드로 처리.
이제 이 트랜지션에서 Has Exit Time 옵션 풀어주기.
이 옵션은 조건이 만족되었더라도 현재 애니메이션 끝나고 넘어가게 하는 것.

이제 앞으로 애니메이터 컨트롤러 오버라이드 해서 사용하면 됨. 같은 로직이라면.
생성은 크리에이트 => 애니메이트 오버라이드 컨트롤러.
그러면 이제 오버라이드할 컨트롤러 지정할 수 있고 지정하면 그 컨트롤러 노드들이 나옴.
따로 지정 안해주면 기본 베이스의 노드들 가져다 씀.

이제 프리팹 만들어서 캐릭터 넣어놓기.
SDRPGPack1에서 프리팹에 히어로 있는거 씬에 올려서 하이라키 올리기
그리고 연동 풀려면 올리고 프리팹->언팩 컴플리틀리

얘네들 이름 바꾸고 캐릭터 스크립트 붙여주고 컨트롤러 부분에 방금 만든거 넣기.
그리고 프리팹으로 캐릭터 폴더에 저장.

anim.SetBool(ActorAnim.isAttack.ToString(), false);
SetState(ActorState.Idle);

이제 이렇게 SetBool과 SetState로 상태 및 변수 조정.

캐릭터 클래스 구현
필드로 BoCharacter 들고 있는건 매번 캐스팅 안하려고 들고 있는 것.
성능을 쓰던지 메모리를 쓰던지 해야 함.

이외 이제 액터에서 물려받은 메소드들과 추가 메소드 구현.
스탯 구현하려면 성장 스탯 테이블 필요.

성장스탯 테이블은 보통 2가지 형태로 많이 씀.
1. 기획자가 미리 공식을 각 레벨별로 전부 적용시켜서 레벨별로 성장스텟 데이터 셋이 존재하는 형태
2. 공식을 미리 계산하는 것이 아니라 공식 자체를 테이블에서 들고 있어서 해당 공식을 가지고 클라에서 계산하여 적용하는 형태.

우리가 작성하는건 2번의 형태.

SetStats 에서 이미 가지고 있는것의 필드를 또 sd캐릭터에서 받아오는 이유는 외부 요인에 의해서 최종 변경된 값이 왼쪽 필드에 오는 것이기 때문에.


