UI 작업 할 때는 뷰포트 좌상단에 2D 눌러주면 좋음.

버텍스가 모여서 하나의 삼각형을 그리고 그것들이 모여서 면을 이룸 3D에서
이 삼각형이 폴리곤

메쉬 필터에는 메쉬 파일이 들어가있음. 그걸 통해 메시를 불러옴.
이 메시를 화면에 그려주는 건 메쉬 렌더러

마테리얼 = 재질 표현.
우리가 만들 수 있는데 일반적으로 모델러가 파일에 입혀놓음. 모델 파일에 같이 넘어옴.
진짜 원초적으로 보면 매터리얼은 셰이더 코드
셰이더 코드에서 특수한 필드같은 것을 사용자가 만들고 그 필드 값을 통해 보기 좋은 재질을 설정함. 모델러가 기본적으로 설정함. 색상이나 질감이나. 이 설정 값들이 그대로 다 유지가 된 파일로 된 것이 매터리얼.
셰이더 코드 공부하면 특수 효과들 표현 가능. 홀로그램처럼 보이게 한다거나 MMORPG에서 몬스터  죽을 때 몬스터 몸이 불타는 것처럼 하면서 사라지는 효과. 디졸브라고 하는데 디졸브 셰이더 만들 수도 있고.
그래픽스 적인 다양한 것을 매터리얼 통해서 표현 가능.

그리고 Lighting
Probes
Additional Settings 는 지금 몰라도 됨
어떤 방식으로 빛을 받고 그림자 표현 할건지 받을건지 말건지 이런 값이나 모션 벡터를 적용할건지 오클루젼 설정할건지 등등.

라이팅은 애초에 손댈 일이 없음. 어느정도 규모가 있는 회사라면 그래픽 팀쪽에서 알아서 기본적인 세팅을 해서 넘겨줌. 라이팅은 따로 개념만 보면 됨.

박스 콜라이더는 2D랑 동일 에딧 콜라이더로 버튼 눌러 크기 조절하거나 isTrigger 등 잇음.

3D 오브젝트 중에
Text-TextMeshPro 이건 원래 기본 텍스트가 효과가 적어서 애셋으로 있던 앤데 너무 좋으니 기본으로 넣어줬음.
Ragdoll 있음. 플레이어는 강체 적용할 때 하나의 강체만을 적용해서 플레이어 몸 전체에 하나의 리지드 바디를 적용하는데 이 Ragdoll은 실제 사람처럼 모델러가 잡아놓은 본들을 하나하나 강체 다 넣는 것.
그래서 조금 더 실제적이고 역동적인 효과 줄 수 있음. FPS 게임 보면 죽는 순간에 총을 맞았는데 총을 맞은 방향대로 날아가면서 바람풍선처럼 휘적이면서 죽는다던가. 그런 연출을 위해 사용.
아니면 특수한 게임. 
그래서 래그돌은 연산을 엄청나게 잡아먹음. 일반적으로는 특수한 게임 아닌 이상 잘 안씀.
연출에 많이 사용함. 평소에는 그냥 캐릭터이다가 죽는 순간에만 래그 돌로 바꿔서 연출하거나.

Terrain
지형. 바닥에 무슨 면이 깔림 크기가 큼.터레인 컴포넌트랑 콜라이더가 달려있음. 콜라이더는 지형 충돌 위해 있는 것.
터레인 사이즈는 컴포넌트 보면 톱니바퀴로 세팅 있음. 거기에
Mesh Resolution 에 기본적인 사이즈가 결정이 됨.

유니티에서도 지형 만들게 툴을 몇개 지원함. 첫번째 탭은 크리에이트 네이보 터레인. 이웃 터레인 추가 생성하는 기능.
Paint Terrain
지형 씬에서 만드는 기능. 드롭다운 창에 다양한 효과들 있음.
Brush Size와 Opacity로 조정.
실제 지형은 그런데 이렇게 잘 안만듦. 지형 만드는 가장 전통적인 방법은 이미지 파일들을 이용해서 이미지 파일에서 색상을 읽어오거나 정보를 읽어와서 이미지 파일을 기반으로 지형을 만드는 기법이 전통적임.

Paint Hole은 구멍내는 거. 유니티에서 예전에 터레인 기능으로 동굴을 만들 수가 없었음. 그걸 만들 수 있게 하려고 추가한 기능. 근데 이것도 구려서 동굴 못 만듦. 동굴 만드는 오픈소스 애셋 같은 것이 조금 있을 것. 그게 기능이 더 좋음.

PaintTexture
터레인 지형에 원하는 텍스쳐 입힘. 텍스쳐는 Edit Terrain Layers 에서 크리에이트 레이어 해서 레이어 만들어서 멀티로 할 수도 있음.있음.

Set Height
지정 높이까지 브러쉬나 플래튼을 통해 올릴 수 있음.

Smooth Height는 부드럽게 올려줌

Stamp Terrain
도장처럼 모양 찍어버림.

그런데 이걸로 잘 안함. 이미지 사용해서 많이 함.

Paint Trees
지형에 트리 배치.
Edit 트리해서 나무 관련 프리펩 넣고 찍으면 됨. 

Details
나무 외에 지형. 자잘자잘한 부분. 꽃이라던가 조약돌이라던가. 지형에 있을만한 잡다한 객체들 배치시켜서 터레인에서 한 번에 관리 가능. 잡초라던가.
잡초 그리는 방식도 두가지 있음. 텍스쳐 이용해서 하거나 메쉬 이용해서 그릴 수도 있음.
당연히 텍스쳐가 가벼움. 대신 2D로 표현하는 거니 메쉬로 표현하는게 눈에 보는건 메쉬가 훨씬 좋음.
초원 같은 지형이면 잡초가 엄청 많을텐데 메쉬로 꽃는다? 프레임 박살.
이것도 완화할 수 있는 방법이 있음. 시대가 좋아져서.

Setting
세팅에선 매터리얼 입혀서 지형에 내가 원하는 그래픽 색감같은거 입히려면 지형에 셰이더 입혀서 표현할 수 있음. 만화같은 느낌의 지형이라던가. 그럼 카툰 셰이더 넣어서 표형 가능.
대신 지형 셰이더는 일반 셰이더랑 작성 방법이 어렵고 틀려서 왠만하면 오픈소스를 찾아서 하는걸 추천.

Tree & Detail Objects
디테일 디스턴스는 카메라랑 잡다한 객체 거리가 몇 이상이 되면 안보이게 최적화 처리 관련된 옵션.
트리도 마찬가지.
빌보드 이런건 프로젝트 하면서 설정할 것.

Wind Settings for Grass
바람 풀게 하는 효과
불게 하려면 3D object에 WindZone 을 설치해야 함.
그래서 나무나 풀 같은 것이 바람에 흔들리는 것처럼 표현 가능.
막 한다고 되는 것은 아니고 설정이 따로 되어있어야 가능함.

Texture Resolution
이것이 실제 옛날부터 쓰던 지형 만드는 방법.
terrain height map 이런거 검색해서 높이 설정. 흰->검을 0->1로 표현해서 검정이면 낮게 흰색이면 높게 표현해서 높이맵을 지형 생성한 것. png 파일로 저장해야 함.
그리고 png ->raw변환해야 함.  이 RAW파일 가지고 이 유니티 세팅에서 Import Raw 해야 함.

Resolution은 잘 맞춰서.

3D Object에서 트리는 예전에 애셋으로 있던 애임. 스피드 트리라고.
그런데 이 이 애셋이 설정된 값들로 몇가지 나무 패턴을 생성 편하게 해주고 지형에 나무 배치할 때 사용하는 최적화 옵션들이 잘 되어 있었어서 사람들이 많이 사용하니까 기본으로 넣어줬음.
최적화 된놈. 터레인에 트리로 추가해서 쓸거면 써도 됨.

3D Text는 쓸 일이 없음. 그거 쓸바에 TextMeshPro 씀.


Effects

가장 위에 ParticleSystem
이거 이용해서 원하는 파티클 모양 만드는 것. 얘를 이용해서 이펙트를 만듦.
이걸로 간단한 이펙트를 만들어 보는 것도 좋음 .그런데 깊이는 파지 않는게 좋을지도. 프로그래밍만 해도 벅참.
이 탭은 사실상 이펙터가 만지게 될 탭임. 파티클 시스템 이용해서 작성하거나 요즘은 비주얼그래프 같은 거 이용해서 셰이더를 노드 방식으로 짜기 편하게 되어있는게 있는데 그걸로 이펙터가 이펙트 만드거나 함.
그래서 만들어서 줄거니까 굳이 이펙트를 깊이 팔 이유는 없음.

그래도 조금 보면 기본적으로 체크되어 있는 탭들 있음.
Emission
입자의 수 결정. 얼마만큼 입자를 생성할 것인지 설정 가능. Bursts에서 추가해서 가능.
성능 엄청나게 먹음 당연히 많아지면. 이펙트 발산할 때 프레임 너무 떨어지면 Emission 확인해봐야 함.
Shape 퍼지는 모양. 
Renderer도 걍 써보면 됨. 

Particle System Force Field
이펙트가 영향 받는 영역. 파티클 시스템이 같이 있어야 의미가 있음.

Trail
트레일 렌더러 이용해서 뒤쪽에 꼬리같이 따라가는 효과. 잔상이라던가.

Line
비슷함. 화면 내에 원하는 선 그리고 싶을 때


Light
기본적인 것들 몇개 있음.
3D 씬에 기본적으로 박혀있는 Light. Directional Light 직사광선. 태양처럼 라이팅
깊게 들어가면 공부할게 많음.
Intensity로 세기 조정.
Flare 만화나 영화에 햇빛 쎄게 쬘 때 프리즘 같이 맺히는 현상.

종류가 많음 라이트는
Reflection Probe와 Light Probe Group은 위와 다르고 신경쓸 필요 거의 없음 지금은.
이 라이트들을 그냥 다 쓰는건 아님. 라이트도 표현하는 방식이 있는데 만들어보면 라이트에 라이트 모드가 있음.
리얼타임 믹스드 베이크드. 리얼타임은 진짜 실시간으로 실행타임에 실행하는 것.
믹스드는 섞인 것. 베이크는 라이팅을 미리 실행 전에 구워놓고 연산 다 해놓고 가져다가 씀.
어떤 라이트는 어떤 모드로만 쓸 수 있고 이런게 정해져 있음.
아트가 알아서 하니까 프로그래밍에 집중.

비디오는 아예 안씀.

카메라.
이건 Projection 필드 통해 퍼스펙티브나 오소그래픽.
오소그래픽은 카메라랑 얼마나 멀든 동일한 크기로 찍어냄. 탑뷰로 위에서 아래로 찍는 형태로 되어있는 것들.
퍼스펙티브는 사람 눈처럼 봄. 당연히 Field Of View 사각이 생김. 그리고 멀어짐에 따라 소실점이 생김. 너무 멀어져서 점처럼 보이고 안보이게 되는. 크기도 달라짐.

야매 속성 강의인데 제대로 공부할거면 Direct X Rendering Pipeline 그래픽스 파이프라인이나 이런거 읽어보는게 좋음.
어떤 구조로 3D 객체를 월드에 올리고 화면에 출력하는지 과정이 Direct X 렌더링 파이프라인.
다이렉트 X 공부하면 가장 처음에 보게 되는 것.
이 과정 모르고 제대로 된 게임을 만들어 낼 수 없음.
어려운 걸 하려면 원리를 알아야 응용하듯이 시간 있으면 읽어봐야 함. 개념정도는 이해해야 함.
