플레이어에 콜라이더 추가. 폴리곤 하면 어느정도 맞춰서 생성해줌. 수정하려면 에딧 콜라이더로.
충돌 하려면 둘 중 하나엔 리지드 바디가 있어야 하니 플레이어에 달기.
리지드 바디 가장 중요한게 바디 타입. 기본 값 다이나믹인데 이 물체는 앞으로 유니티에 있는 물리엔진에 따라 움직인다는 것. 자동적으로 중력이나 설정된 값들. 기본적으로 프로젝트 셋팅에서 있음.
거기서 피직스 2D가보면 설정값들 있음.
물리 강체가 달린 순간부터 다른 콜라이더가 없다고 한다면 바로 중력에 영향을 받아서 아래로 떨어짐.
우리는 다이나믹이 아니고 키네마틱 사용. 키네마틱은 게임 객체의 움직임을 프로그래머가 코드로 컨트롤 할 때.
Translate 같은걸로 할때 사용
스태틱은 고정된 객체에 사용.

캔버스 하나 만들고 빈 객체로 UIPanel 생성.
우리가 출력하고자 하는 UI는 하단에 나옴.
UI-Text 호라이전털 버티컬 오버플로우 오버플로우 해놓으면 박스 크기 넘어가도 출력.

유니티 텍스트엔 텍스트 겉에 아웃라인 넣는 기능이 없음. 별도의 컴포넌트는 존재.
Outline이라는 컴포넌트. 아웃라인은 렌더러 존재하면 사용 가능.
텍스트도 어떤 렌더러 통해 출력되는거라 아웃라인 사용 가능. 얘가 달리면 겉에 테두리 생김.

전통적 아웃라인과 달리 성능적으로 좋지 않음. 큰 차이는 아님. 실력좋아지면 알아서 셰이더 찾아서 할것.

UI 스프라이트 또 쪼개는데 그림자도 인식하는데 귀찮으니까 자르자.

유니티는 이미지 늘릴 때 균일하게 늘림. 그런데 원하는 영역만 늘릴  수 있음. 보더처리 하면 됨.
이미지 파일 선택해서 스프라이트 에디터 들어감. 여기서 보더처리할 이미지 선택하면 됨. 그럼 우하단에 팝업에서 보더라고 있음.이미지가 늘어날 때 늘릴 부분. 어느 영역만 늘어나게 할지.
적용한다고 바로 적용되는게 아님.
이미지 타입을 심플에서 슬라이스드로 해야 함. 근데 이걸 잘 잡아야 하는게 보더를 잘 못잡으면 늘어나는 부분이 이상해짐. 그래서 아트팀에서도 사이즈를 몇 개씩 줌. 원본보다 너무 다르게 하거나 하면 이상해짐.

아이콘 배치.

UIIngame 스크립트 작성
네임스페이스 유니티엔진.UI 사용해야 Text랑 Image 사용가능.

사이즈 접근할 때는 sizeDelta통해 라이프 게이지 크기 받아올 수 있음.

게임 점수 게임 매니저에서 받아와서 텍스트에 출력. 여기서 투스트링에 형식 지정도 가능함.
        score.text = GameManager.Instance.currentScore.ToString("현재 점수 \n0.00");
소수점 두자리까지 나오게 됨.

GameObject.SetActive(bool) : bool 값이 참일 경우 오브젝트 활성화

게임 매니저에서 게임 시작상태 나타내는 필드.

게임 오버된지 3초 확인하려면 어디서 시간을 계속 받아야 함.

최고점수는 파일로 저장할 것.
json 자바 스크립트 오브젝트 노테이션
자바 스크립트에서 오브젝트 표현하는 표현법대로 열거해놓은 텍스트 파일.
이걸 유니티에서 컨트롤하려고 JsonUtility 있음.
이거 단점이 꽤 많이 있음. 현업에선 이거 거의 사용하지 않음. 별도로 Json 관련된 라이브러리 많음.
유명하고 주로 사용하는 것은 3D에서 사용.
간단한 데이터만 쓸거라 기본 JsonUtility 사용.

파일 경로 작성시에는 어떤 폴더 안에 존재하는지 전체 경로 작성하는 것이 아님 상대경로로.
그 사람 설치할 때 리소스 폴더가 같이 설치되는데 앞의 경로가 다르기 때문.
상대경로 사용 위한 기능들 있음. 특수명령어 쓰면 상대경로 사용가능함.
$"{Application.dataPath}" 이런 식으로
데이터랑 퍼시스턴트 데이타패스랑 스트리밍애셋패스 쓰는데 플랫폼마다 다 다름.
데이터 패스는 애셋 폴더까지의 경로 반환해줌. 그러니 애셋에서 접근할 경로 적으면 됨.

    private void Awake()
    {
        savePath = $"{Application.dataPath}/Resources/Json/";
    }
이렇게.


