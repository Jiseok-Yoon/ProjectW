배틀에 배틀 매니저 추가

switch에 쿼리문으로 조건 걸 수 있음.

지금 하는 방식은 객체 자체에선 콜백을 빼고 객체들에 메소드 작성하고 한 컨테이너에 몰아두고 업데이트 시키는 것이 실제 프로파일링 할 때 호출 속도같은게 차이가 많이 나서 성능적으로 더 좋음.

배틀 매니저 싱글톤으로

키를 뗀 순간 연산 계속할 수 없으니 두 가지를 따로 하긴 귀찮고 OnNotPress() 에서 같이 처리.

원래는 UnityEngine.Input.GetButtonUp 같은 걸로 따로 처리하는게 좋음.

캐릭터 회전 및 카메라 전환 등 구현.


점프 구현.
점프는 지상에 있는지 캐릭터에서 체크.
레이캐스팅으로 체크. 캐릭터 아래로 레이캐스팅해서 땅이 있는지 없는지.
이 때 레이의 길이를 엄청 짧게 하면 땅에 닿아있는지 확인 가능.

콜라이더 둘 다 있으니 콜라이더로 땅에 있는지 없는지 확인 안되나 생각할텐데 콜라이더만 가지고 있어도 충분히 체크 가능한 것 맞음. 근데 미세하고 디테일하게 값을 확인하려면 레이캐스팅 이용해서 체크하는게 땅 체크를 좀더 민감하게 할 수 있음. 그만큼 비용은 더듦.

boActor.isGround = Physics.Raycast(transform.position, Vector3.down, .1f, 1 << LayerMask.NameToLayer("Floor"))

            rig.AddForce(Vector3.up * boCharacter.sdCharacter.jumpForce, ForceMode.Impulse)

강체에 힘줘서 점프. 힘주는 방법은 Impulse는 순간적으로 Force는 질량 상관있이 계속 Acceleration은 질량 상관없이 계속 Velocity도 질량 상관없이 속도 바꾸기.

이제 땅에 레이어 달고 해보면 됨.

캐릭터 점프 못하는게 땅 콜라이더랑 겹쳐서 충돌로 못하는게 있어서 콜라이더 Height 1 이상으로.
애니메이터에 Apply Root Motion 다 체크 해제

RootMotion은 기본적으로 애니메이션 보면 이동이 있는데 이 애니메이션의 이동을 그대로 따라갈건지 아닐건지를 나타내는 값.
애니메이션 파일 자체에서도 설정 가능한데 거기보단 캐릭터 애니메이터에서 풀어버리기.

애니메이션들 1회성인거 루프타임 풀기.


새 스테이지 프리팹 만들기.

워프 만들기. 이펙트는 판타지 스펠 이펙트 팩에서 가져오기.
이펙트 41번째의 에너지 플로우에서 에너지 스피어만 빼와서 워프처럼 쓸 것.

유니티에서 이펙트 만드는 법 두가지 파티클하고 셰이더 코드를 작성해서 처리하는 방법.

프리팹 빌딩에 넣어놓고 스케일 조정하기.

레이캐스트에서 1 << LayerMask  하는건 비트마스킹

그다음 프리팹 연동 풀고 워프 빈객체 만들고 그 안에 넣고 EntryPos 만들고 Z포지션 1로 설정.

이 EntryPos는 플레이어가 워프에 닿으면 무조건 이동시킬 것. 상황에 따라 UI 만들 수도 있을테지만 귀찮으니까.
그럼 다음 스테이지에서 나올텐데 이 때 만약 캐릭터가 이동한 위치가 다른 워프의 위치랑 동일하면 이 때도 다른 워프로 이동하게 될 것 무한워프 되는 것. 이거 방지하려고 EntryPos 만들어서 워프가 바라보는 동일 방향으로 1만큼 띄워서 무한워프 막고 바로 보여줄 방향 보여주려고.