액셀 JSON 자동변환해주는 툴 작성해보자.

에디터 폴더 애셋에 생성.
Editor 라는 이름도 Resources 폴더, Plugins 폴더처럼 예약된 기능 함.
에디터 상에서만 돌아갈 코드를 따로 관리할 수 있음.
최종적으로 사용자 배포할 때 이 코드가 포함되지 않는다는 것.
애셋과 스태틱 데이타 추가함.

Excel ->Json 변환은 편하게 하려면 액셀을 편하게 받으려면 별도의 외부라이브러리 써야 함.
그래서 완전 새로 짜는게 아니라 오픈 소스 이용해서 할 것.
ExcelToJsonConverter


그리고 파일 변동시 자동감지해서 수정 할 것. 파일 이동 삭제 변경사항 감지 코드 애셋 폴더 안에 작성.
에디터 안에 있는 코드 생성하면 어젬블리 C# 에디터 프로젝트가 생기고 최종 빌드에서 제외됨.

ProjectWAssetPostProcessor에서 AssetPostprocessor 상속

파일 들어와서 기본 세팅한다거나 할 때 자동으로 호출. OnPostProcessGameObjectWithUserProperties 메서드.
아트 사람이랑 같이 한다거나 해서 같이 일하는 경우에 좋음.

유니티 에디터에 보면 프로젝트 생산성에 도움됨.

StaticDataImporter 작성

기획 데이터 판단하는 IsStatac

Define에 이제 스태틱 데이타 정의.

엑셀도 확장자 여러개일 수 있음.
            if (path.EndsWith(".xlsx") == false)


            return (isDeleted || File.Exists(absolutePath))


                try
                {

                }
                catch (Exception e)
                {
                    Debug.LogError(e);
                }

기획 데이터 변환 실패하면 트라이 캐치.

EditorUtility.DisplayDialog();

에디터의 대화창 생성.

오픈소스 쓸 때는 사용하는 용도가 단순히 변환. 보통 기능이 완벽히 실행되니까 공유를 하는 것.
그러니 내가 초점 맞출 부분은 기능 작성 되어있으니 외부 데이터 받아서 뭐하는지.
중요한 것은 파일의 풀 패스를 넘겨줘야 함. 그런데 지금 우리의 패스는 애셋부터 시작함. 그래서 애셋 경로를 풀패스로 변경해서 컨버터에 파라미터 넘겨줘야 함.

var fileName = staticDataAsset.Substring(staticDataAsset.LastIndexOf('/') + 1;
파일 네임만 가져오기.

이제 풀패스 얻기.

어쨌든 새로운 파일 만들었으면 드래그드랍과 달리 에디터에서 새로고침 해줘야 함.


OnPostProcessAllAssets -> 콜백함수임.

StaticDataModule 은 액셀 로우 하나하나.

이제 스태틱 데이터 모듈 만들었으면 게임 매니저가 이 데이터를 들고 잇는 모듈을 가지고 있게 함.
private StaticDataModule sd = new StaticDataModule();
그냥 씨샵 클래스니까.

public static StaticDataModule SD => Instance?.sd;

모노비해비어 없으니까 안보이는데 보고싶으면 필드로 만들고 씨샵 클래스를 직렬화시키고 필드도 직렬화 필드로 선언해주면 인스펙터에 노출이 됨.
[Serializable]
[SerializeField] 

이제 타이틀 컨트롤러 가서 SD. 이니셜라이즈;

애셋에 더미폴더 만들고 so 생성

네트워크에 핸들러 만듦. 유저데이터 불러오기 위해.

