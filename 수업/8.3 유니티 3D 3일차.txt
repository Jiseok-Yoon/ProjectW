싱글톤에서 스레드 세이프 유지하기 위해 lock 해줄 객체 있음.
그것만 같고 2D랑 다른 점은 없음 싱글톤.
그리고 이번 프로젝트부터 네임스페이스 쓸 것.

네임스페이스 쓰면 RPG다보니 사용하는 코드라던게 그런게 굉장히 많아서 동일한 이름의 코드가 종종 생김.
클래스 이름이나 복합 데이터랑 이름이 같다던가 그런 경우가 생겨서 네임스페이스로 구분하려고.
실제 현업에서 많이 사용. 괜히 이름 늘려서 짓기 싫으니까.

Define은 클래스 정의가 아니라
프로젝트에서 사용되는 상수나 열거형 정의.

스위치 단축키
sw 적고 탭 두번 변수 적고 탭 한 번 누르고 방향키 아래.

게임 만드는게 이럼. 시스템 오지게 구현하고 어느정도 되면 게임 구현하는 것.

?. 는 널이 아닐때 접근하는 것.
    titleController?.Initialize();
            //if (titleController != null)
            //{
            //  titleController.Initialize();
            //}

            // 수직동기화 끄기
            QualitySettings.vSyncCount = 0;

            // 렌더 프레임을 60으로 설정
            Application.targetFrameRate = 60;

	// 앱 실행 중 장시간 대기 시에도 화면이 꺼지지 않게
            Screen.sleepTimeout = SleepTimeout.NeverSleep;


서버 관련 스크립팅 할 폴더 Network와 Dummy 만듦

클라이언트에서 바로 DB 접근해주는 것은 뒷끝이나 파이어 베이스(구글)나 이런거 BASS라고 함
보안에 취약. 보안적으로 좋지 않음 클라에서 디비 바로 가는게.
최소한의 보안처리 해놓고 이렇게 바로 붙는 경우도 있는데 클라에서 서버 요청하고 아니면 서버에서 연산해달라고 요청하면 데이터 가지고 연산하고 그거 가지고 DB로 보내서 저장시키는 것이 정석.
이 DB가 서버 컴쪽에 같이 있는 경우도 있는데 요즘은 같이 있는 경우 거의 없음.
별도의 DB 서비스나 큰 회사면 자체적으로 있음. 이 DB는 데이터 덩어리만 있음.

우리가 할 작업은 Client를 만드려고 코드를 작성중임.
실제로 서버도 클라에서 사용하는 데이터에 맞게 어떤 처리를 하려고 서버 프레임워크를 만들어서 프로젝트를 올려놓는 것임.
그런데 우리가 서버 프레임워크를 만들 수 없음. 서버 지식 전무한 상태라서.
그래서 클라이언트에 더미 서버를 만들 것임.
가짜 서버를 만들어서 더미 서버에다가 어떤 데이터를 요청하거나 받아오거나 하는 작업들을 할 것.
그 코드는 실제 서버 붙어도 거의 동일한 형태로 사용할 수 있음. 간접적으로 체험을 해보는 것.
DB는 외부 서비스 이용하면 좋겠지만 쓰려면 해야 될 기본적인 작업들이 많음.
Unity에 스크립터블 오브젝트라는게 있음 줄여서 SO
이거 이용해서 로컬에다가 PC에 DB처럼 저장해둘 것.
그럼 다른 경로에서 클라이언트로 데이터 읽어오거나 직접적으로 쓰게 하는 것.

네트웤에 인터페이스로 INetworkClient 만듦.
서버와 통신하는 프로토콜 메서드. 서로 데이터 맞춰서 주는 것.
그것을 갖는 인터페이스.

네트워크 핸들러도 만들 것.
Dto라고 Data Transfer Object 의 베이스
DtoBase 받을 것.
서버 통신 후 받는 데이터에 대한 처리를 일반화 해서 수행하게 될 것 핸들러에서.

Database 폴더 만들고
Dto 폴더와 Bo 폴더 생성.

Bo는 비즈니스 오브젝트. 클라이언트 내부에서 사용될 데이터를 말함. 비즈니스 로직에서 사용되기 때문에 비즈니스 오브젝트.

Bo라고 치면 안나올건데 Dto 치면 관련 용어 나올 것인데 거기서 비즈니스 로직에 사용되는 데이터다 설명 되있을 것. 그것을 임의로 Bo로 사용하는 것.
둘 다 사용되는 데이터는 딱 하나 만들어서 같이 쓰는게 아니라 데이터 셋을 분류해서 만듦.
DtoChar 데이터 BoChar 데이터 이렇게 분류하는 이유는 동일한 데이터를 나타내더라도 서버에서 쓰는 데이터와 클라에서 쓰는 데이터의 타입이 틀릴 수 있음.
우리는 유니티하니까 씨샵쓰는데 일반적으로 씨샵 서버를 쓰지는 않음.
서버 프레임워크는 보통 씨플플이나 파이썬이나 여러개 섞어서 씀. 그러면 서버에서 데이터 편하게 관리하기 위해서, 혹은 어떤 타입으로 저장했을 때 DB 관리면에서 효과적이다 그걸 서버분이 알고 있어서 알아서 알맞는 타입으로 이용해서 통신에서 보내주거나 변환해서 보내줄 수도 있는데 일반적으로는 조금 틀림.
우리는 int 쓰는데 통신에선 다른 거 쓸 수도 있고.
그리고 Bo 데이터와 Dto 데이터가 다를 수 있음. 간단한거 빼버려가지고.

[Serializable]
해서 Dto는 직렬화 해줘야 함.

그리고 핸들러 대리자 선언해주고
생성자에 대리자 지정해주고
성공시 메서드에 string 으로 json 파일 데이터 받아서 임의 T타입으로 변환해줄 것.

그리고 유틸에 SerializationUtil 클래스 만들 것. 직렬화 해주거나 역직렬화 해주는 클래스.
자주 쓰니까 스태틱으로 설정.


    // 이번에는 Unity의 JsonUtility를 사용하지 않을 것
    // 이유? Unity의 JsonUtility는 직렬화하고자하는 객체가 다른 객체에서 파생되는 객체라면
    // 정상적으로 베이스에 있던 필드를 받아올 수가 없음.
    // 쓰려면 별도로 JsonUtility를 커스텀해야함..

    // 일반적으로 JsonUtility를 사용하지 않고, 외부 라이브러리 중 LitJson, NewtonsoftJosn을
    // 주로 많이 사용함... 우리는 그 중에 NewtonsoftJson을 사용할 것

dll은 동적 라이브러리 줄여서 부르는 것. 이제 dll 받으면 직렬화 역직렬화 구현되어 있는데 코드 상세한 내용 볼 수 없게 암호화 처리되어있다고 생각하면 됨. 불러다가 쓸 수는 있는 것. 세부 구현을 우리가 볼 수 없다는 것.
사실 볼려고 하면 볼 수 있는 프로그램이 있긴 함.


유니티는 이름에 따라 특수한 기능을 하는 폴더가 있음.
예약된 이름의 폴더가 있음.
우리가 Assets 에 하위 폴더 맘대로 만드는데 특정한 이름으로 폴더 이름 지으면 특별한 기능을 수행하는 폴더들이 있음.
2D에서도 Resources 라는 이름을 썼는데 이것도 해당됨.
우리가 게임에 사용될 리소스를 이 폴더에 올려놓으면 우리가 코드로 Resouces라는 클래스가 있음 유니티 안에.
그래서 런타임에 이 폴더 안의 애셋들을 불러올 수 있게 됨.
마찬가지로 우리가 사용할 라이브러리를 우리가 정상적으로 인식시키려면 Assets 폴더 안에 Plugins 폴더를 만들어서 이 폴더 안에 외부 DLL 을 넣어줘야 정상적으로 인식함.

패키지에 들어있을 경우도 있음. 한 번 썼으면 유니티 레지스트리 등록되어가지고. 그러면 플러그인 날리면 됨.
그리고 dll 가서 인스펙터에서 설정 가능.
플러그인에 있으면 몇가지 설정 해야 함. Any Platform에 체크 되어있는지 확인하고 Exclude Platforms에 체크 없어야 함.

다 하고 이제 코드 가서 부름 using Newtonsoft.Json;

그리고 정적 메서드 만듦.

외부 dll은 그 제공하는 페이지가면 리드미나 설명파일 있음. 보고 하면 됨.
유니티 JsonUtility는 쓰려면 커스텀 너무해야해서 외부 dll 많이 씀.

그리고 이제 핸들러 가서 임의 T타입으로 변환해주고 데이터로 받음. 데이터는 dto 형식이라 에러코드 있음.
에러코드 있는지 확인하는 메소드 추가.
에러코드도 서버분이 정해줌. API 프로토콜 작성된 문서같은거 엑셀이나 이런걸로 정해서 줄 것임.
에러코드 몇번은 무슨 오류 무슨오류.

// 요청 성공 시 실행할 델리게이트가 존재한다면 실행
                successDel?.Invoke(data);
