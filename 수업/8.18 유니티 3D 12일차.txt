Define에 Camera 클래스 만들기.

예전 2D때 캐릭터에서 키입력도 받고 이동 처리도 했는데 기능 분리가 중요함.
이렇게 다처리할 수도 있지만 기능을 분리할 것. 캐릭터 쪽에서는 이동 처리만 남기고 키 입력은 별도로 다른 클래스로 뺄 것.

PlayerController라던가 해서 따로 빼는 것.
이렇게 해서 얻는 이점이 무엇인가.
캐릭터에 다 있으면 멀티 게임이라고 쳤을 때 캐릭터 클래스 통해 다른 유저의 키입력까지 받아버리게 됨.
그래서 멀티 고려한다면 캐릭터는 이동 처리만을 특정 데이터를 가지고 연산만 하게 남기고 인터랙션 적인 부분은 별도로 분리를 하는게 좋음.이렇게 하면 기존 캐릭터 클래스로 다른 유저의 캐릭터도 처리하고 내 캐릭터는 플레이어 컨트롤러로 이동을 시키면 됨.

인풋 클래스 Define에 생성
인풋 매니저에서 인풋 시스템에 우리가 쓸 키들 바인딩.

플레이어 컨트롤러에 키 값 대리자 만들고 바인딩 하고.

프론트 캠 키는 캐릭터 뒤에 원래 찍는 카메라가 앞으로 올 수 있도록 하는 키.

캐릭터 조종하려고 만드는 것. 그런데 캐릭터는 여러 인스턴스가 있을 수 있음. NPC라던가.
그 중에 내 캐릭터 인스턴스를 받아와야 입력정보를 토대로 내 캐릭터를 제어할 수가 있음.
그럼 초기화 부분에서 내 캐릭터에 대한 인스턴스를 받아오도록 하자.

character.transform.parent = transform;
            character.gameObject.layer = LayerMask.NameToLayer("Player");

컨트롤러 부모로 하고 레이어 마스크 넣기.

카메라 컨트롤러 생성


카메라 보간하면 동일한 간격을 이동하는게 아님.
목표지점에서 멀수록 많이 이동했다가 목표에 다가갈수록 이동 속도가 줄어둚.
transform.forward = Vector3.Lerp(transform.forward, target.forward, Time.fixedDeltaTime * smooth)
smooth에 델타 타임 곱한게 유연성.

에디터 가서 캐릭 하나 꺼내놓고 CamPos와 StandardPos 랑 FrontPos 생성.
세팅해놓고 프리팹 넣기.

그리고 스테이지 매니저 가서 SpawnCharacter 메소드 생성

다 하고 인게임 씬 가서 플레이어 컨트롤러 달아두기.
메인 카메라에 카메라 컨트롤러 달기.
그리고 플레이어 컨트롤러의 카메라 컨트롤러 참조에 넣어주기.
