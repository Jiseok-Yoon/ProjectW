오브젝트 풀을 object로 박싱해서 보관하는 것이 편의성을 높이고 성능이 조금 딸리는 방법.
아니면 일일이 명시적으로 해줘야 함.

오브젝트 풀 매니저 구현하고 리소스 매니저에 LoadPoolableObject 만듦.

UI로 넘어가면 켜고 끌 수 있는 것도 있고 그렇지 않은 UI들도 있음.
그래서 베이스 클래스 공통된거 모아서 작성.

UI 윈도우와 UI 윈도우 매니저 생성.

캔버스 그룹 사용할 것. 최적화때문에.

캔버스는 자기가 들고 있는 UI중에 비활성화나 활성화되면 캔버스 자체를 화면에서 다시 그림.
그런데 UI 요소중에 SetActive가 빈번하게 일어난다? 그 때마다 캔버스를 매번 새로 그려야 함.
이게 문제가 됨.
UI캔버스 안에 요소가 많으면 이 중 하나만 비활성화 해도 다시 다 그려야 되서 엄청 비효율적.
그래서 유니티가 추천하는 방식은 UI마다 캔버스 따로 만들라고 함.
근데 이건 생산성이 굉장히 비효율적임. 캔버스가 많은게 좋은 것도 아니고.
그래서 UI요소를 실제로 활성 비활성화 하는 방식을 사용하지 않을 것.
화면에서 원할 때 안보이게 하는 것을 캔버스 그룹이라는 컴포넌트가 대신할 것.
이것을 사용하면 하이라키 배치를 UI 캔버스가 있고 UI별로 빈객체를 하나 만듦.
그리고 여기에 UIWindow를 갖는 UI 스크립트를 붙임.
그리고 캔버스 그룹을 UIWindow가 가지게 해서 캔버스 그룹 내에서 해당 객체 안에 있는 요소들을 알파값으로 보이게 하거나 안보이게 하는것임.
실제로 객체를 활성 비활성 하는게 아니고 객체는 항상 켜져있지만 보이지만 않게 하는 것.
그리고 캔버스 그룹이 있으면 특정 UI 부분만 막거나 허용할 수 있음. 

    [RequireComponent(typeof(CanvasGroup))]

이렇게 포함시킴.

윈도우 매니저 작성.
리스트랑 딕셔너리로 UIWindow 들고 있을 것.
그리고 캐싱을 할꺼임.
캐싱은 자주 사용되는 데이터 A 매번 검색해서 찾아서 쓰면 겁나 비효율적.


