통신 데이터인 Dto를 그대로 클라에서 쓰는 경우 거의 없음
데이터셋 변환 후에 씀. Bo로.

BoAccount 작성.
Bo 는 클라이언트 내부에서만 사용해서 직렬화 안해도 됨.
그래도 지금은 배워가는 단계이니 에디터에서 인스펙터 보도록 해보자.
원래는 안하는게 맞음.

전처리 해놔도 됨
#if UNITY_EDITOR
[Serializable]
#endif
해놓으면 유니티 에디터에서만 직렬화가 됨

Dto를 받아서 여러번 쓸 것 같으면 생성자에서 미리 받아놓는것도 좋음.

데이터베이스 bo폴더에 추가 데이터셋을 만들 것. BoUser
    /// 유저의 모든 Bo 데이터를 포함하는 데이터 셋

BoUser가 인게임 모든 유저 데이터를 가지는 클래스가 될 것.
그럼 BoUser의 인스턴스를 당연히 게임 매니저에 가지게 할 것.
그리고 인스펙터에서 보게 시리얼라이즈 필드.
외부 접근 가능하게 프로퍼티도.

DtoAccount 를 Do로 변환해서 BoUser에 가지게 해야 함.
            GameManager.User.boAccount = new BoAccount(dtoAccount);

이래서 아까 생성자로 바로 Bo 변환 가능하게 해놓은 것.
아직은 없는 계정이나 스테이지 데이터 등을 이 과정에서 Success가 됐을 때 실행하면 됨.
서버 매니저의 서버에 또 다른 메서드로 지금 쓰는 Login 말고 GetCharacterData라든가 있어서 가져오도록.
보통 이런 작업들은 하나라도 처리 안되면 로그인을 실패로 막고 모든 과정이 성공해야만 다음으로 넘어가기 때문에 절차적으로 하나씩 하면 됨. 상황에 따라 빨리 데이터 받으려면 비동기로 받아도 됨.

그러니 Success 됐을 때만 로드 컴플리트를 true 해줘야 하니까 선언해줘야 함.
이 작업은 한 번만 하는 거니까 타이틀 컨트롤러 찾아서 로드 컴플리트 true로 바꿔주고 싶음. 그런데 FindOfType을 쓰고 싶은데 모노를 안받아서 찾을 수가 없음.
	// 모노를 갖지 않는 클래스에서 FindOfType 같은 메서드를 사용하고 싶다면?
            // 모노를 갖는 객체로 접근하여 해당 매서드를 사용하면 됌.\

이제 타이틀 컨트롤러에서 new LoginHandler().Connect() 하면 됨.
굳이 어디서 들고 있을 이유는 없음.


실습
DtoCharacter를 작성.
- 캐릭터 인덱스 필드(기획 캐릭터 테이블 상의 인덱스)
- 캐릭터 레벨 필드

인덱스 필드가 왜 필요하냐면 인덱스만 서버가 보내주면 기획 테이블은 클라에 있으니 클라가 캐릭터 정보 불러올 수 있음.
서버가 캐릭터 모든 데이터 가지고 있을 필요가 없음. 기획 데이터 자체는 클라이언트가 같이 가지고 있으니 필요한 데이터만 보내는 것.
SDCharacter 정보와
유저의 레벨 정보를 알 수 있고
추가로 이 레벨 정보로 해당 유저의 캐릭터의 성장 스탯 정보를 알 수도 있음.
성장 테이블을 만든 것은 아니지만.

DtoCharacter는 이렇게 2개의 데이터만 있으면 됨.

BoCharacter를 작성
- Dto에서 넘겨받은 캐릭터 인덱스로 SDCaracter 정보를 찾아서 필드로 갖는다.
- 레벨은 일단 그냥 동일하게 넘겨준다. 성장테이블 하면서 수정할 예정.

이 작업이 끝났다면 로그인 핸들러에서 현재 계정정보를 받아오는 것처럼 동일하게 캐릭터 정보를 받아올 수 있다는 것.
이것까지 로그인 핸들러에 작성하면 됨. 계정 정보 불러오고 캐릭터 정보 로그인 피니쉬 하도록.


Linq 사용해서 BoCharacter 작성.

Linq는 사람이 하는 방식처럼 질의 응답으로 작성하는 쿼리문. 검색해보자.
            sdCharacter = characterTable.Where(_ => _.index == dtoCharacter.index).SingleOrDefault();

Single은 만약에 조건 안맞으면 오류나와서 잘 안씀
SingleOrDefault 쓰면 기본값 리턴. 참조타입이니까 null 리턴할 것.
